// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Access_tokenScopes = "access_token.Scopes"
)

// Defines values for PackageArchitecture.
const (
	Amd64 PackageArchitecture = "amd64"
	Arm64 PackageArchitecture = "arm64"
	Arm7  PackageArchitecture = "arm-7"
)

// BaseResponse defines model for BaseResponse.
type BaseResponse struct {
	// Message message returned by server side if there is any
	Message *string `json:"message,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Architecture PackageArchitecture `json:"architecture"`
	URL          string              `json:"url"`
}

// PackageArchitecture defines model for Package.Architecture.
type PackageArchitecture string

// Release defines model for Release.
type Release struct {
	Packages     []Package `json:"packages"`
	ReleaseNotes string    `json:"release_notes"`
	Version      string    `json:"version"`
}

// Version defines model for Version.
type Version = string

// ReleaseOK defines model for ReleaseOK.
type ReleaseOK struct {
	Data *Release `json:"data,omitempty"`

	// Message message returned by server side if there is any
	Message *string `json:"message,omitempty"`
}

// ResponseInternalServerError defines model for ResponseInternalServerError.
type ResponseInternalServerError = BaseResponse

// ResponseNotFound defines model for ResponseNotFound.
type ResponseNotFound = BaseResponse

// ResponseOK defines model for ResponseOK.
type ResponseOK = BaseResponse

// GetReleaseParams defines parameters for GetRelease.
type GetReleaseParams struct {
	// Version version of the release
	Version *Version `form:"version,omitempty" json:"version,omitempty"`
}

// InstallReleaseParams defines parameters for InstallRelease.
type InstallReleaseParams struct {
	// Version version of the release
	Version *Version `form:"version,omitempty" json:"version,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the information about the latest release of CasaOS
	// (GET /release)
	GetRelease(ctx echo.Context, params GetReleaseParams) error
	// Install a release of CasaOS
	// (POST /release)
	InstallRelease(ctx echo.Context, params InstallReleaseParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRelease converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelease(ctx echo.Context) error {
	var err error

	ctx.Set(Access_tokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReleaseParams
	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelease(ctx, params)
	return err
}

// InstallRelease converts echo context to params.
func (w *ServerInterfaceWrapper) InstallRelease(ctx echo.Context) error {
	var err error

	ctx.Set(Access_tokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallReleaseParams
	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallRelease(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/release", wrapper.GetRelease)
	router.POST(baseURL+"/release", wrapper.InstallRelease)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xW227jNhD9FWLaR9lKs94W0FtatIWRYh0kvTwExmIijS12JZI7HLnrDfTvBUnJiuNk",
	"m16A7pNJk5w5c+ZydA+lbZ01ZMRDcQ8OGVsS4rj7ldhra8KyIl+ydhK3sEsHym6U1KSYGkJPkIEOp+87",
	"4j1kYLCl6TJk4MuaWkzmNtg1AgU0KOQFMpC9C7e9sDZb6Ps+AybvrPEUwVwnJ6vLsCmtETISluhco0sM",
	"yPLffUI7OcKmWW2guL2HL5k2UMAX+RRxnu75/Fv0dD04gz67B8fWEYtOriuUaOxTJgZ4Afg6gj9mbHUJ",
	"fQajj6URYoPNDfGO+Htmyy+Iij5g6xoKy5a8x23gazSlki2VjPUPyX555Ke4nzU/Pnpj5Qfbmeqf4n9j",
	"RSUD/xnmI5Pjxb9ZN//Gf8j1IZhYQEcvisfldSDjcZsNB4pJOjZUqbu98ikPXlekdGw/JqW9QhNa7kAx",
	"PN1RV1i+G1wdY0Auay1USsfxlEzXQnEL2FZfLyAD5Hb8nX0D6xPjGXTcHCUZahHnizzfaqm7u3lp23xZ",
	"0m81NvQzlXW+JcmHyeHzyv5hGotVvjubL+aLGTauxq/yEj1aP4soZkdHc0Gebz+ehJnBh9nWzobZ88v1",
	"T5AmCVYr0+yhEO4o7N93mqkKIQbg2TEB61g4qaFPqHKJw7jWQq3/q3oZSe8PWJEZ9xBxRSdvjZVk8ITW",
	"3TSDJ2ojE6+fSPGnI50m8bHfbIppHSuXyo617G9CAEN9lCV5/1bsO4pY4qCvCSviadJfdFJb1h9jU03o",
	"0OlL2qcC1GZjTwv94mqpNpaVNl6wabTZKjSV6lyFEjbfocfVjbJGoapop8ugNaIlkjEcLtNbYnVxtYQH",
	"xMHuPBBpHRl0Ggp4NT+bv4pBSx2DG8swrLcUp0NIeAxjWUEBP5JcHzTuoUY+oyvTlXzU0H79SM/Oz86e",
	"K5zDvXwSvT6DxdniJS8ezeU+g9cvc/W8NsWi6NoWeZ/YiLIfcsltZEnhne3Sv0nQx2+C8ImQEhSAOOuf",
	"YHfI3P/F8EEfPiOKB0oUPsXjwxaNBB035+06MJF0IhEYRzPku/Ncj00C/br/MwAA//8JI5al/QkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
