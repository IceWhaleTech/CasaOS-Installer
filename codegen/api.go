// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Access_tokenScopes = "access_token.Scopes"
)

// Defines values for PackageArchitecture.
const (
	Amd64 PackageArchitecture = "amd64"
	Arm64 PackageArchitecture = "arm64"
	Arm7  PackageArchitecture = "arm-7"
)

// BaseResponse defines model for BaseResponse.
type BaseResponse struct {
	// Message message returned by server side if there is any
	Message *string `json:"message,omitempty"`
}

// Module defines model for Module.
type Module struct {
	Name  string `json:"name"`
	Short string `json:"short"`
}

// Package defines model for Package.
type Package struct {
	Architecture PackageArchitecture `json:"architecture"`
	Path         string              `json:"path"`
}

// PackageArchitecture defines model for Package.Architecture.
type PackageArchitecture string

// Release defines model for Release.
type Release struct {
	Mirrors      []string  `json:"mirrors"`
	Modules      []Module  `json:"modules"`
	Packages     []Package `json:"packages"`
	ReleaseNotes string    `json:"release_notes" yaml:"release_notes,omitempty"`
	Version      string    `json:"version"`
}

// Version defines model for Version.
type Version = string

// ReleaseOK defines model for ReleaseOK.
type ReleaseOK struct {
	Data *Release `json:"data,omitempty"`

	// Message message returned by server side if there is any
	Message *string `json:"message,omitempty"`
}

// ResponseInternalServerError defines model for ResponseInternalServerError.
type ResponseInternalServerError = BaseResponse

// ResponseNotFound defines model for ResponseNotFound.
type ResponseNotFound = BaseResponse

// ResponseOK defines model for ResponseOK.
type ResponseOK = BaseResponse

// GetReleaseParams defines parameters for GetRelease.
type GetReleaseParams struct {
	// Version version of the release
	Version *Version `form:"version,omitempty" json:"version,omitempty"`
}

// InstallReleaseParams defines parameters for InstallRelease.
type InstallReleaseParams struct {
	// Version version of the release
	Version *Version `form:"version,omitempty" json:"version,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the information about the latest release of CasaOS
	// (GET /release)
	GetRelease(ctx echo.Context, params GetReleaseParams) error
	// Install a release of CasaOS
	// (POST /release)
	InstallRelease(ctx echo.Context, params InstallReleaseParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRelease converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelease(ctx echo.Context) error {
	var err error

	ctx.Set(Access_tokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReleaseParams
	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelease(ctx, params)
	return err
}

// InstallRelease converts echo context to params.
func (w *ServerInterfaceWrapper) InstallRelease(ctx echo.Context) error {
	var err error

	ctx.Set(Access_tokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallReleaseParams
	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallRelease(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/release", wrapper.GetRelease)
	router.POST(baseURL+"/release", wrapper.InstallRelease)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xW0W/bthP+V4j7/R5lK03SDdBbVmyDEawJkmF7SI3iIp0lrhLJkic3aqD/fSApWVbs",
	"FMk2YHuyaJJ333133/EeIdeN0YoUO8gewaDFhphsWP1G1kmt/GdBLrfScFjCNm4IvRFckbBUEzqCBKTf",
	"/dyS7SABhQ1NhyEBl1fUYDS3wbZmyKBGJseQAHfGn3ZspSqh7/sELDmjlaMA5iY6ubr0i1wrJsX+E42p",
	"ZY4eWfqHi2gnR1jXVxvI7h7h/5Y2kMH/0iniNJ5z6Q/o6GZwBn3yCMZqQ5ZldF0gB2PfMjHA88DXAfyc",
	"satL6BMYfawUk1VY35Ldkv3RWm1fEBU9YGNq8p8NOYel52s0JaItEY31+2S/PPJD3M+aHy+91/yTblXx",
	"V/G/1yyigX8M88zkePCVdfN3/Ptc74IJBTS7kT0trx0ZT2U2bAhL3FpFhbjvhIt5cLIgIYP8LAnpBCov",
	"uR3FcFxRv+iirY9AiFLdSxHk6FC7RYlMX7A7tJaAq7Tl+aVnTwcxY3Gl6g4yti359edWWiogu4vuR4vr",
	"PoFrzD8NlMyBos0ryZRzayNg1TbeAjbFd+eQANpm/F18D+sjsA1yNUedlsTp0MNcWugvqtZYpNuT5fny",
	"fIG1qfBNOvAR/CxmW0tGuyy/vjroACSZR7QOFRs7yWGdSC++8CmZGjePomI2LkvTUnLV3i9z3aSrnH6v",
	"sKZfKa+OZbCRahUNvdntorXYhc1QKnNv31LFUFr9oSUTk/lyU2P2ZxDPDg0POfuoNNMTNt5VqEpy2Qe1",
	"XC4/qIPoE3hYaDRykeuCSlILemCLC8YyGOqwqSGbO0h049Eb7kJqt9PjOLkNhfH21aUwPZHzkJJdzvdY",
	"nFKzDm2G8tZK7m49eYNI8pyc+8j6EwV84VWuCAuy07N80XKlrfwaOuCEGI28pC52C6k2+rArXVyvxEZb",
	"IZVjrGupSoGqEK0pkP3iHTq8uhVaCRQFbWXupc2SY17i5ireJSsurlewRyZsT31mtSGFRkIGZ8uT5RlE",
	"2YbgRqX675JCA/IiCWGsCsjgZ+Kb3UCyP9A8MwRMR9Jx4OnXT4aP05OT54p2dy6dJpQ+gfOT85fcePKI",
	"9gm8fZmr5weJUBRt06DtIhthRvO5tE1gSeC9buO/cfoaBzg/z8UEBdlqd4TdIXP/FsO7x/w/RPFAicBj",
	"PO5LNBA0F+fd2jMRH/VIYGt950m3p6kcRQL9uv8zAAD//wb92hSqCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
